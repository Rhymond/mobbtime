{"version":3,"sources":["App.js","serviceWorker.js","index.js","tick.wav","ding.mp3"],"names":["Person","children","selected","remove","style","width","backgroundColor","color","textAlign","padding","marginBottom","borderRadius","cursor","onClick","App","props","state","currentPerson","selectedPerson","people","cycleTime","breakTime","breakRotations","rotateTime","timer","status","rotations","audioTick","Audio","tick","audioDing","ding","setInterval","run","nextPerson","play","setState","this","length","getCycleTime","getBreakRotations","getRotateTime","nextSelectedPerson","break","getBreakTime","isNaN","index","slice","minutes","Math","floor","seconds","className","Column","map","person","i","removePerson","Field","Label","Control","Input","value","onChange","val","target","onKeyPress","event","key","addPerson","placeholder","fullwidth","bind","type","fontSize","size","Group","startPressed","skipPressed","resetPressed","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.85799e9a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\nimport { Button, Columns, Container, Form, Heading, Section } from \"react-bulma-components\";\nimport tick from \"./tick.wav\";\nimport ding from \"./ding.mp3\";\n\nconst Person = ({ children, selected, remove }) => (\n  <div style={{\n    width: \"100%\",\n    backgroundColor: selected ? \"#5c9ff1\" : \"#f1f1f1\",\n    color: selected ? \"white\" : \"black\",\n    textAlign: \"center\",\n    padding: \"8px 0\",\n    marginBottom: 8,\n    borderRadius: \"10px\",\n    cursor: \"pointer\",\n  }} onClick={remove}>\n    {children}\n  </div>\n);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPerson: \"\",\n      selectedPerson: -1,\n      people: [],\n      cycleTime: 1,\n      breakTime: 2,\n      breakRotations: 3,\n      rotateTime: 3,\n      timer: 60,\n      status: \"begin\",\n      rotations: 0,\n    };\n\n    this.audioTick = new Audio(tick);\n    this.audioDing = new Audio(ding);\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      if (this.state.status === \"begin\" || this.state.status === \"pause\") {\n        return\n      }\n\n      if (this.state.status === \"rotate\" && this.state.timer === 0) {\n        this.run()\n      }\n\n      if (this.state.status === \"running\" && this.state.timer === 0) {\n        this.nextPerson()\n      }\n\n      if (this.state.status === \"break\" && this.state.timer === 0) {\n        this.nextPerson()\n      }\n\n      if ((this.state.status === \"running\" || this.state.status === \"break\") && this.state.timer > 1 && this.state.timer <= 4) {\n        this.audioTick.play();\n      }\n\n      if ((this.state.status === \"running\" || this.state.status === \"break\") && this.state.timer === 1) {\n        this.audioDing.play()\n      }\n\n      let timer = this.state.timer - 1;\n      if (timer <= 0) {\n        timer = 0\n      }\n      this.setState({\n        timer: timer,\n      })\n    }, 1000);\n  }\n\n  startPressed() {\n    if (this.state.status === \"begin\") {\n      if (this.state.people.length === 0) {\n        return\n      }\n\n      this.setState({\n        status: \"running\",\n        timer: this.getCycleTime(),\n        selectedPerson: 0,\n      })\n    }\n\n    if (this.state.status === \"running\") {\n      this.setState({\n        status: \"pause\"\n      })\n    }\n\n    if (this.state.status === \"rotate\") {\n      this.run()\n    }\n\n    if (this.state.status === \"pause\") {\n      this.setState({\n        status: \"running\"\n      })\n    }\n\n    if (this.state.status === \"break\") {\n      this.nextPerson()\n    }\n  }\n\n  skipPressed() {\n    this.nextPerson()\n  }\n\n  resetPressed() {\n    this.setState({\n      status: \"begin\",\n      timer: this.getCycleTime(),\n      selectedPerson: -1,\n      rotations: 0,\n    })\n  }\n\n  addPerson() {\n    if (this.state.currentPerson === \"\") {\n      return\n    }\n\n    this.setState({\n      people: [...this.state.people, this.state.currentPerson],\n      currentPerson: \"\",\n    });\n  }\n\n\n  //////////////////////////\n  nextPerson() {\n    if (this.state.people.length === 0) {\n      return\n    }\n\n    if ((this.state.rotations + 1) !== 0 && (this.state.rotations + 1) % this.getBreakRotations() === 0) {\n      this.break();\n      return\n    }\n\n    this.setState({\n      status: \"rotate\",\n      timer: this.getRotateTime(),\n      selectedPerson: this.nextSelectedPerson(),\n      rotations: this.state.rotations + 1,\n    })\n  }\n\n  break() {\n    this.setState({\n      status: \"break\",\n      timer: this.getBreakTime(),\n      rotations: -1,\n    })\n  }\n\n  run() {\n    this.setState({\n      status: \"running\",\n      timer: this.getCycleTime(),\n    })\n  }\n\n  nextSelectedPerson() {\n    const selectedPerson = this.state.selectedPerson + 1;\n    if (selectedPerson === this.state.people.length) {\n      return 0\n    }\n\n    return selectedPerson\n  }\n\n  getCycleTime() {\n    if (isNaN(this.state.cycleTime)) {\n      return 8\n    }\n\n    return this.state.cycleTime * 60\n  }\n\n  getRotateTime() {\n    if (isNaN(this.state.rotateTime)) {\n      return 0\n    }\n\n    return this.state.rotateTime\n  }\n\n  getBreakRotations() {\n    if (isNaN(this.state.breakRotations)) {\n      return 0\n    }\n\n    return this.state.breakRotations\n  }\n\n  getBreakTime() {\n    if (isNaN(this.state.breakTime)) {\n      return 0\n    }\n\n    return this.state.breakTime * 60\n  }\n\n  removePerson(index) {\n    if (index === this.state.selectedPerson) {\n      return\n    }\n    if (index < this.state.selectedPerson) {\n\n    }\n    this.setState({\n      people: [...this.state.people.slice(0, index), ...this.state.people.slice(index + 1)],\n      selectedPerson: index < this.state.selectedPerson ? this.state.selectedPerson - 1 : this.state.selectedPerson,\n    })\n  }\n\n  render() {\n    const { currentPerson, timer, status, people, selectedPerson, cycleTime, rotateTime, breakRotations, breakTime } = this.state;\n\n    const minutes =  Math.floor(timer / 60);\n    const seconds = timer - minutes * 60;\n\n    return (\n      <div className=\"App\">\n        <Section>\n          <Container>\n            <Columns>\n\n              <Columns.Column>\n                {people.map((person, i) => (\n                  <Person selected={i === selectedPerson} remove={() => {\n                    this.removePerson(i)\n                  }}>{person}</Person>\n                ))}\n\n                <Form.Field>\n                  <Form.Label>Participants</Form.Label>\n                  <Form.Control>\n                    <Form.Input value={currentPerson} onChange={val => {\n                      this.setState({\n                        currentPerson: val.target.value,\n                      })\n                    }} onKeyPress={event => {\n                      if (event.key === 'Enter') {\n                        this.addPerson()\n                      }\n                    }} placeholder=\"Add someone\" />\n                  </Form.Control>\n                </Form.Field>\n\n                <Form.Field>\n                  <Form.Control>\n                    <Button fullwidth color=\"success\" onClick={this.addPerson.bind(this)}>Add</Button>\n                  </Form.Control>\n                </Form.Field>\n\n                <Form.Field>\n                  <Form.Label>Cycle Time</Form.Label>\n                  <Form.Control>\n                    <Form.Input type=\"number\" value={cycleTime} onChange={val => {\n                      this.setState({\n                        cycleTime: val.target.value,\n                      })\n                    }} placeholder=\"Durations in Minutes\" />\n                  </Form.Control>\n                </Form.Field>\n\n                <Form.Field>\n                  <Form.Label>Rotation Time (Seconds)</Form.Label>\n                  <Form.Control>\n                    <Form.Input type=\"number\" value={rotateTime} onChange={val => {\n                      this.setState({\n                        rotateTime: val.target.value,\n                      })\n                    }} placeholder=\"Durations in Seconds\" />\n                  </Form.Control>\n                </Form.Field>\n\n\n                <Columns>\n                  <Columns.Column>\n                    <Form.Field>\n                      <Form.Label>Break after rotations</Form.Label>\n                      <Form.Control>\n                        <Form.Input type=\"number\" value={breakRotations} onChange={val => {\n                          this.setState({\n                            breakRotations: val.target.value,\n                          })\n                        }} placeholder=\"Amount of rotations\" />\n                      </Form.Control>\n                    </Form.Field>\n                  </Columns.Column>\n\n                  <Columns.Column>\n                    <Form.Field>\n                      <Form.Label>Break duration</Form.Label>\n                      <Form.Control>\n                        <Form.Input type=\"number\" value={breakTime} onChange={val => {\n                          this.setState({\n                            breakTime: val.target.value,\n                          })\n                        }} placeholder=\"Duration in Minutes\" />\n                      </Form.Control>\n                    </Form.Field>\n                  </Columns.Column>\n                </Columns>\n\n\n              </Columns.Column>\n\n              <Columns.Column style={{textAlign: \"center\"}}>\n                <Heading style={{fontSize: \"100px\"}} size={1}>\n                  {minutes < 10 ? ('0' + minutes) : minutes}:{('0'+seconds).slice(-2)}\n                </Heading>\n\n                <div style={{ fontSize: \"36px\" }}>\n                  { status === \"begin\" && \"Press Start to Begin\"}\n                  { status === \"running\" && people[selectedPerson] + \", you're up!\"}\n                  { status === \"pause\" && \"Timer is paused\"}\n                  { status === \"rotate\" && people[selectedPerson] + \", grab the keyboard!\"}\n                  { status === \"break\" && \"Brews n Loos!\"}\n                </div>\n              </Columns.Column>\n            </Columns>\n          </Container>\n        </Section>\n\n        <Section>\n          <Container>\n            <Button.Group>\n              <Button  color=\"success\" onClick={this.startPressed.bind(this)}>\n                { status === \"begin\" && \"Start\"}\n                { status === \"running\" && \"Pause\"}\n                { status === \"pause\" && \"Resume\"}\n                { status === \"rotate\" && \"I'm Ready\"}\n                { status === \"break\" && \"I'm Ready\"}\n              </Button>\n\n              <Button color=\"primary\" onClick={this.skipPressed.bind(this)}>\n                Skip\n              </Button>\n\n              <Button color=\"danger\" onClick={this.resetPressed.bind(this)}>\n                Reset\n              </Button>\n            </Button.Group>\n          </Container>\n        </Section>\n\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/tick.cf7231be.wav\";","module.exports = __webpack_public_path__ + \"static/media/ding.6f819a8c.mp3\";"],"sourceRoot":""}