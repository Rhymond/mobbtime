{"version":3,"sources":["App.js","serviceWorker.js","index.js","tick.wav","ding.mp3"],"names":["App","props","state","currentPerson","selectedPerson","people","cycleTime","breakTime","breakRotations","rotateTime","timer","status","rotations","dragPerson","draggedOverPerson","audioTick","Audio","tick","audioDing","ding","setInterval","run","nextPerson","play","setState","this","length","getCycleTime","shuffle","a","i","j","Math","floor","random","getBreakRotations","getRotateTime","nextSelectedPerson","break","getBreakTime","isNaN","index","slice","minutes","seconds","className","Column","map","person","key","style","width","backgroundColor","color","marginLeft","transition","textAlign","padding","marginBottom","borderRadius","cursor","draggable","onClick","removePerson","onDragStart","e","onDragEnd","splice","onDragOver","Field","Label","Control","Input","value","onChange","val","target","onKeyPress","event","addPerson","placeholder","fullwidth","bind","type","fontSize","size","Group","startPressed","skipPressed","resetPressed","shufflePressed","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.ac0dbda6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"react-bulma-components/dist/react-bulma-components.min.css\";\nimport \"./bulmaswatch.min.css\";\nimport {\n  Button,\n  Columns,\n  Container,\n  Form,\n  Heading,\n  Section,\n} from \"react-bulma-components\";\nimport tick from \"./tick.wav\";\nimport ding from \"./ding.mp3\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPerson: \"\",\n      selectedPerson: -1,\n      people: [],\n      cycleTime: 1,\n      breakTime: 2,\n      breakRotations: 3,\n      rotateTime: 3,\n      timer: 60,\n      status: \"begin\",\n      rotations: 0,\n      dragPerson: -1,\n      draggedOverPerson: -1,\n    };\n\n    this.audioTick = new Audio(tick);\n    this.audioDing = new Audio(ding);\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      if (this.state.status === \"begin\" || this.state.status === \"pause\") {\n        return;\n      }\n\n      if (this.state.status === \"rotate\" && this.state.timer === 0) {\n        this.run();\n      }\n\n      if (this.state.status === \"running\" && this.state.timer === 0) {\n        this.nextPerson();\n      }\n\n      if (this.state.status === \"break\" && this.state.timer === 0) {\n        this.nextPerson();\n      }\n\n      if (\n        (this.state.status === \"running\" || this.state.status === \"break\") &&\n        this.state.timer > 1 &&\n        this.state.timer <= 4\n      ) {\n        this.audioTick.play();\n      }\n\n      if (\n        (this.state.status === \"running\" || this.state.status === \"break\") &&\n        this.state.timer === 1\n      ) {\n        this.audioDing.play();\n      }\n\n      let timer = this.state.timer - 1;\n      if (timer <= 0) {\n        timer = 0;\n      }\n      this.setState({\n        timer: timer,\n      });\n    }, 1000);\n  }\n\n  startPressed() {\n    if (this.state.status === \"begin\") {\n      if (this.state.people.length === 0) {\n        return;\n      }\n\n      this.setState({\n        status: \"running\",\n        timer: this.getCycleTime(),\n        selectedPerson: 0,\n      });\n    }\n\n    if (this.state.status === \"running\") {\n      this.setState({\n        status: \"pause\",\n      });\n    }\n\n    if (this.state.status === \"rotate\") {\n      this.run();\n    }\n\n    if (this.state.status === \"pause\") {\n      this.setState({\n        status: \"running\",\n      });\n    }\n\n    if (this.state.status === \"break\") {\n      this.nextPerson();\n    }\n  }\n\n  skipPressed() {\n    this.nextPerson();\n  }\n\n  resetPressed() {\n    this.setState({\n      status: \"begin\",\n      timer: this.getCycleTime(),\n      selectedPerson: -1,\n      rotations: 0,\n    });\n  }\n\n  shufflePressed() {\n    if (this.state.status !== \"begin\") {\n      return;\n    }\n    let people = this.state.people;\n    people = this.shuffle(people);\n    this.setState({\n      people: people,\n    });\n  }\n\n  shuffle(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n\n  addPerson() {\n    if (this.state.currentPerson === \"\") {\n      return;\n    }\n\n    this.setState({\n      people: [...this.state.people, this.state.currentPerson],\n      currentPerson: \"\",\n    });\n  }\n\n  //////////////////////////\n  nextPerson() {\n    if (this.state.people.length === 0) {\n      return;\n    }\n\n    if (\n      this.state.rotations + 1 !== 0 &&\n      (this.state.rotations + 1) % this.getBreakRotations() === 0\n    ) {\n      this.break();\n      return;\n    }\n\n    this.setState({\n      status: \"rotate\",\n      timer: this.getRotateTime(),\n      selectedPerson: this.nextSelectedPerson(),\n      rotations: this.state.rotations + 1,\n    });\n  }\n\n  break() {\n    this.setState({\n      status: \"break\",\n      timer: this.getBreakTime(),\n      rotations: -1,\n    });\n  }\n\n  run() {\n    this.setState({\n      status: \"running\",\n      timer: this.getCycleTime(),\n    });\n  }\n\n  nextSelectedPerson() {\n    const selectedPerson = this.state.selectedPerson + 1;\n    if (selectedPerson === this.state.people.length) {\n      return 0;\n    }\n\n    return selectedPerson;\n  }\n\n  getCycleTime() {\n    if (isNaN(this.state.cycleTime)) {\n      return 8;\n    }\n\n    return this.state.cycleTime * 60;\n  }\n\n  getRotateTime() {\n    if (isNaN(this.state.rotateTime)) {\n      return 0;\n    }\n\n    return this.state.rotateTime;\n  }\n\n  getBreakRotations() {\n    if (isNaN(this.state.breakRotations)) {\n      return 0;\n    }\n\n    return this.state.breakRotations;\n  }\n\n  getBreakTime() {\n    if (isNaN(this.state.breakTime)) {\n      return 0;\n    }\n\n    return this.state.breakTime * 60;\n  }\n\n  removePerson(index) {\n    if (index === this.state.selectedPerson) {\n      return;\n    }\n    if (index < this.state.selectedPerson) {\n    }\n    this.setState({\n      people: [\n        ...this.state.people.slice(0, index),\n        ...this.state.people.slice(index + 1),\n      ],\n      selectedPerson:\n        index < this.state.selectedPerson\n          ? this.state.selectedPerson - 1\n          : this.state.selectedPerson,\n    });\n  }\n\n  render() {\n    const {\n      currentPerson,\n      timer,\n      status,\n      people,\n      selectedPerson,\n      dragPerson,\n      cycleTime,\n      rotateTime,\n      breakRotations,\n      breakTime,\n      draggedOverPerson,\n    } = this.state;\n\n    const minutes = Math.floor(timer / 60);\n    const seconds = timer - minutes * 60;\n\n    return (\n      <div className=\"App\">\n        <Section>\n          <Container>\n            <Columns>\n              <Columns.Column>\n                {people.map((person, i) => (\n                  <div\n                    key={i}\n                    style={{\n                      width: \"100%\",\n                      backgroundColor: i === selectedPerson ? \"#5c9ff1\" : \"#f1f1f1\",\n                      color: i === selectedPerson ? \"white\" : \"black\",\n                      marginLeft: i === draggedOverPerson ? 12 : 0,\n                      transition: \"all 100ms linear\",\n                      textAlign: \"center\",\n                      padding: \"8px 0\",\n                      marginBottom: 8,\n                      borderRadius: \"10px\",\n                      cursor: \"pointer\",\n                    }}\n                    draggable={true}\n                    onClick={() => {\n                      if (status !== \"begin\") {\n                        return\n                      }\n                      this.removePerson(i);\n                    }}\n                    onDragStart={e => {\n                      if (status !== \"begin\") {\n                        return\n                      }\n                      this.setState({\n                        dragPerson: i\n                      });\n                    }}\n                    onDragEnd={e => {\n                      if (status !== \"begin\") {\n                        return\n                      }\n                      if (dragPerson === -1) {\n                        return\n                      }\n                      people.splice(draggedOverPerson, 0, people.splice(dragPerson, 1)[0]);\n                      this.setState({\n                        dragPerson: -1,\n                        draggedOverPerson: -1,\n                        people: people\n                      });\n                    }}\n                    onDragOver={e => {\n                      if (status !== \"begin\") {\n                        return\n                      }\n                      if (draggedOverPerson !== i) {\n                        this.setState({\n                          draggedOverPerson: i,\n                        })\n                      }\n                    }}\n                    >\n                    {person}\n                  </div>\n                ))}\n\n                <Form.Field>\n                  <Form.Label>Participants</Form.Label>\n                  <Form.Control>\n                    <Form.Input\n                      value={currentPerson}\n                      onChange={(val) => {\n                        this.setState({\n                          currentPerson: val.target.value,\n                        });\n                      }}\n                      onKeyPress={(event) => {\n                        if (event.key === \"Enter\") {\n                          this.addPerson();\n                        }\n                      }}\n                      placeholder=\"Add someone\"\n                    />\n                  </Form.Control>\n                </Form.Field>\n\n                <Form.Field>\n                  <Form.Control>\n                    <Button\n                      fullwidth\n                      color=\"success\"\n                      onClick={this.addPerson.bind(this)}\n                    >\n                      Add\n                    </Button>\n                  </Form.Control>\n                </Form.Field>\n\n                <Form.Field>\n                  <Form.Label>Cycle Time</Form.Label>\n                  <Form.Control>\n                    <Form.Input\n                      type=\"number\"\n                      value={cycleTime}\n                      onChange={(val) => {\n                        this.setState({\n                          cycleTime: val.target.value,\n                        });\n                      }}\n                      placeholder=\"Durations in Minutes\"\n                    />\n                  </Form.Control>\n                </Form.Field>\n\n                <Form.Field>\n                  <Form.Label>Rotation Time (Seconds)</Form.Label>\n                  <Form.Control>\n                    <Form.Input\n                      type=\"number\"\n                      value={rotateTime}\n                      onChange={(val) => {\n                        this.setState({\n                          rotateTime: val.target.value,\n                        });\n                      }}\n                      placeholder=\"Durations in Seconds\"\n                    />\n                  </Form.Control>\n                </Form.Field>\n\n                <Columns>\n                  <Columns.Column>\n                    <Form.Field>\n                      <Form.Label>Break after rotations</Form.Label>\n                      <Form.Control>\n                        <Form.Input\n                          type=\"number\"\n                          value={breakRotations}\n                          onChange={(val) => {\n                            this.setState({\n                              breakRotations: val.target.value,\n                            });\n                          }}\n                          placeholder=\"Amount of rotations\"\n                        />\n                      </Form.Control>\n                    </Form.Field>\n                  </Columns.Column>\n\n                  <Columns.Column>\n                    <Form.Field>\n                      <Form.Label>Break duration</Form.Label>\n                      <Form.Control>\n                        <Form.Input\n                          type=\"number\"\n                          value={breakTime}\n                          onChange={(val) => {\n                            this.setState({\n                              breakTime: val.target.value,\n                            });\n                          }}\n                          placeholder=\"Duration in Minutes\"\n                        />\n                      </Form.Control>\n                    </Form.Field>\n                  </Columns.Column>\n                </Columns>\n              </Columns.Column>\n\n              <Columns.Column style={{ textAlign: \"center\" }}>\n                <Heading style={{ fontSize: \"100px\" }} size={1}>\n                  {minutes < 10 ? \"0\" + minutes : minutes}:\n                  {(\"0\" + seconds).slice(-2)}\n                </Heading>\n\n                <div style={{ fontSize: \"36px\" }}>\n                  {status === \"begin\" && \"Press Start to Begin\"}\n                  {status === \"running\" &&\n                    people[selectedPerson] + \", you're up!\"}\n                  {status === \"pause\" && \"Timer is paused\"}\n                  {status === \"rotate\" &&\n                    people[selectedPerson] + \", grab the keyboard!\"}\n                  {status === \"break\" && \"Brews n Loos!\"}\n                </div>\n              </Columns.Column>\n            </Columns>\n          </Container>\n        </Section>\n\n        <Section>\n          <Container>\n            <Button.Group>\n              <Button color=\"success\" onClick={this.startPressed.bind(this)}>\n                {status === \"begin\" && \"Start\"}\n                {status === \"running\" && \"Pause\"}\n                {status === \"pause\" && \"Resume\"}\n                {status === \"rotate\" && \"I'm Ready\"}\n                {status === \"break\" && \"I'm Ready\"}\n              </Button>\n\n              <Button color=\"primary\" onClick={this.skipPressed.bind(this)}>\n                Skip\n              </Button>\n\n              <Button color=\"danger\" onClick={this.resetPressed.bind(this)}>\n                Reset\n              </Button>\n\n              {status === \"begin\" && (\n                <Button color=\"info\" onClick={this.shufflePressed.bind(this)}>\n                  Shuffle\n                </Button>\n              )}\n            </Button.Group>\n          </Container>\n        </Section>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/tick.cf7231be.wav\";","module.exports = __webpack_public_path__ + \"static/media/ding.6f819a8c.mp3\";"],"sourceRoot":""}